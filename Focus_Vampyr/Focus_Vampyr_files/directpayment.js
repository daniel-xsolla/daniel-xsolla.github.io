/**
 * DirectPayment Legacy Module
 *
 * @author    Christophe Eblé <ceble@nexway.com>
 * @author    Richard Pochot <rpochot@nexway.com>
 * @package   DirectPayment
 * @copyright Nexway - 2013
 * @version   1.0.0
 */

/**
 * DirectPayment Encryption Plugin Class
 *
 * Provide utilies for clientside encryption as well as
 * hidden form submission etc...
 *
 * @author    Christophe Eblé <ceble@nexway.com>
 * @package   DirectPayment
 * @copyright Nexway - 2013
 */
;(function ($, window, document, undefined) {

    // Declare plugin default options
    var _pluginName = 'directPayment',
        defaults = {
            submitHidden: true
        };

    /**
     * @var loaderOptions Options for loader
     */
    var loaderOptions = null;

    var $_form    = null;
    var $_settings = {};
    var $_cctype = null;
    var $_ajxQueryLastStatus = null;

    /**
     * @var payment method field id
     * @var credit card fields mapper
     */
    var _CC_TYPE                = 'payment[cc_type]',
        _CC_START_DATE          = 'payment[cc_start_date]',
        _CC_START_DATE_YEAR     = 'payment[cc_ss_start_year]',
        _CC_START_DATE_MONTH    = 'payment[cc_ss_start_month]',
        _CC_ISSUE_NUMBER        = 'payment[cc_ss_issue]',
        _CC_FIELDS              = {
            'payment[cc_number]'     : 'ccNumber',
            'payment[cc_exp_month]'  : 'ccExpirationMonth',
            'payment[cc_exp_year]'   : 'ccExpirationYear',
            'payment[cc_cid]'        : 'ccCvv',
            'payment[cc_ss_issue]'   : 'ccIssueNumber',
            'payment[cc_owner]'      : 'ccOwnerName',
            'payment[cc_start_date]' : 'ccStartDate'
        };

    /**
    /**
     * Parses a certificate generated by OpenSSL
     *
     * @param string cert String representation of the certificate
     * @return object
     */
    var _parseCertificate = function(cert) {
        var lines = cert.split('\n'),
            read  = false,
            b64   = false,
            end   = false,
            flag  = '',
            data  = {
                info : '',
                salt : '',
                iv   : null,
                b64  : '',
                aes  : false,
                mode : '',
                bits : 0
            };

        $.each(lines, function(i, value){
            flag = value.substr(0, 9);
            if (i == 1 && flag !== 'Proc-Type' && flag.indexOf('M') === 0) {
                b64 = true;
            }

            switch (flag) {
                // Flag the certificate as readable
                case '-----BEGI':
                    read = true;
                    break;
                // Contains information to determine if certificate is encrypted
                // Proc-Type: 4,ENCRYPTED
                case 'Proc-Type':
                    if (read) {
                        data.info = value;
                    }
                    break;
                // The line beginning DEK-Info contains two comma separated pieces of information:
                // the encryption algorithm name as used by EVP_get_cipherbyname()
                // and an 8 byte salt encoded as a set of hexadecimal digits.
                case 'DEK-Info:':
                    if (read) {
                        var tmp = value.split(','),
                            dek = tmp[0].split(': '),
                            aes = dek[1].split('-');
                        data.aes  = (aes[0] === 'AES') ? true : false;
                        data.mode = aes[2];
                        data.bits = parseInt(aes[1]);
                        data.salt = tmp[1].substr(0, 16);
                        data.iv   = tmp[1];
                    }
                    break;
                case '':
                    if (read) {
                        b64 = true;
                    }
                    break;
                // Detect end of certificate
                case '-----END ':
                    if (read) {
                        b64  = false;
                        read = false;
                    }
                    break;
                default:
                    if (read && b64) {
                        data.b64 += pidCryptUtil.stripLineFeeds(value);
                    }
            }
        });

        return data;
    };

    function Plugin(element, options) {

        this.element = element;
        this.options = $.extend({}, defaults, options);

        this._defaults = defaults;
        this._name = _pluginName;

        /**
         * Get option method
         *
         * @param string key
         *
         * @return mixed|false
         */
        this.getOption = function(key) {
            if (this.options.hasOwnProperty(key)) {
                return this.options[key];
            }
            return false;
        };

        /**
         * Set option method
         *
         * @param string key
         * @param mixed  value
         */
        this.setOption = function(key, value) {
            this.options[key] = value;
        };

        /**
         * Remove option method
         *
         * @param string key
         */
        this.removeOption = function(key) {
            delete this.options[key];
        }

        this.init();
    }

    Plugin.prototype = {

        init : function() {},

        /**
         * Sets payment gateway id
         *
         * @return this
         */
        setGatewayId : function(id) {
            this.setOption('gatewayId', id);

            return this;
        },

        /**
         * Sets authorization token
         *
         * @return this
         */
        setAuthenticationToken : function(publicKey, token) {
            this.setOption('authentication_token', {
                'publicKey' : publicKey,
                'token'     : token
            });
            return this;
        },

        /**
         * Sets Availables ccTypes
         *
         * @return this
         */
        setCcTypes : function(ccTypes) {
            this.setOption('ccTypes', ccTypes);

            return this;
        },

        /**
         * Sets form for gateway
         *
         * @return this
         */
        setFormId : function(id) {
            this.setOption('formId', id);
            return this;
        },

        /**
         *
         * Get CreditCard Type (visa, mastercard, ...) from cc_number
         *
         * @return bool|string
         */
        getCreditCardType : function() {
            var aResult = $.directPayment.validateCreditCard();
            if (aResult.card_type != null) {
                var aRes = $.directPayment.getObjects($.directPayment.getCcTypes(), 'key', aResult.card_type.name);
                if (jQuery(aRes).size() > 0) {
                    if ((aResult.length_valid==true) && (aResult.luhn_valid==true)) {
                        return aRes[0].code;
                    }
                }
            }
            return false;
        },

        /**
         *
         * Get CreditCard info (visa, mastercard, ...) from cc_number
         *
         * @return bool|string
         */
        getCreditCardInfos : function() {
            var aResult = $.directPayment.validateCreditCard();
            if (aResult.card_type != null) {
                var aRes = $.directPayment.getObjects($.directPayment.getCcTypes(), 'key', aResult.card_type.name);
                if (jQuery(aRes).size() > 0) {
                    if ((aResult.length_valid==true) && (aResult.luhn_valid==true)) {
                        return aRes[0];
                    }
                }
            }
            return false;
        },


        /**
         * is ccID number correct. Expect only for 3 or 4 digits
         *
         * @return bool
         */

        isCcidCorrect : function(ccIdValue) {
            if(!ccIdValue) {
              return false;
            }
            return /^[0-9]{3,4}$/.test(ccIdValue);
        },


        /**
         * doTransaction order
         *
         * @return void
         */
        doTransaction : function(options) {

            var defaults = {
                    beforeCheckout:  null,
                    afterCheckout: null,
                    onComplete: null,
                    onError: null,
                    onFormValidation: null,
                    onNotLogged: null,
                    onSuccess: null,
                    onRedirect: null,
                    onCallback: null,
                    useLoader: false,
                    registerMode: false,
                    subscriptionCore: null,
                    subscriptionId: null,
                    subscriptionCustomer: null,
                    urlRedirect: null
                };

            // Overwrite the defaults with the provided options (if any)
            this.$_settings = $.extend({}, defaults, options);

            this.$_form = $('#' + this.getOption('formId'));

            var ccType = $('#' + this.getOption('gatewayId') + '_cc_type').val();
            this.$_cctype = ccType;

            if ((ccType==null) || (ccType==''))
                return false;

            if (this.$_settings.beforeCheckout) {
               this.$_settings.beforeCheckout();
            }

            if (ccType.match(/redirect:/)) {
                location.href = ccType.replace(/redirect:/, '');
                return;
            }

            var params = $.directPayment.serializeForm('#' + this.$_form.attr('id'));

            var vUrl = "/ajax_directpayment.html?action=directPayment&callAction=doTransaction";
            if (this.$_settings.registerMode) {
                if (this.$_settings.urlRedirect) {
                  vUrl = "/ajax_directpayment.html?action=directRegisterPayment&callAction=doTransaction&urlRedirect=true";
                } else {
                  vUrl = "/ajax_directpayment.html?action=directRegisterPayment&callAction=doTransaction";
                }
            }

            jQuery.ajax({
                url: vUrl,
                type: "POST",
                data: params,
                async: true,
                context: this,
                beforeSend: function(){
                    $.directPayment.loaderShow(true);
                },
                error: function(jqXHR, textStatus, errorThrown){
                    $.directPayment.loaderHide(true);

                    if (this.$_settings.onError) {
                        this.$_settings.onError(data);
                    }
                    var genericReturnArgs = 'ecode=JsDoTransaction';
                    genericReturnArgs += '&textStatus='+encodeURIComponent(textStatus);
                    genericReturnArgs += '&errorThrown='+encodeURIComponent(errorThrown);

                    var JSON;
                    if (!JSON) {
                        JSON = {};
                    }
                    if (typeof JSON.stringify === 'function') {
                        genericReturnArgs += '&jqXHR='+encodeURIComponent(JSON.stringify(jqXHR));
                    }

                    location.href = '/generic_return.html?' + genericReturnArgs;
                    return false;
                },
                complete: function(data){
                    if (this.$_settings.onComplete) {
                        this.$_settings.onComplete(data);
                    }
                },
                success: function(data, xhr, response){

                    if (response.status == 200) {
                        var aDatas = $.parseJSON(data);
                        if (aDatas && !aDatas.success) {
                            if (this.$_settings.onError) {
                                this.$_settings.onError(data);
                            }
                            if (aDatas.error=='EFORMVALIDATION') {
                                if (this.$_settings.onFormValidation) {
                                    var cctypeDatas = $.directPayment.getDatasFromCode(this.$_cctype);
                                    var $_datas = $.extend({
                                      cctype : this.$_cctype,
                                      role   : cctypeDatas.role,
                                      id     : cctypeDatas.id,
                                      key    : cctypeDatas.key
                                    }, aDatas);
                                    this.$_settings.onFormValidation($_datas);
                                }
                                $.directPayment.loaderHide(true);
                                return true;
                            }
                            if (aDatas.error=='ENOTLOGGEDIN') {
                                if (this.$_settings.onNotLogged) {
                                    var cctypeDatas = $.directPayment.getDatasFromCode(this.$_cctype);
                                    var $_datas = $.extend({
                                      cctype : this.$_cctype,
                                      role   : cctypeDatas.role,
                                      id     : cctypeDatas.id,
                                      key    : cctypeDatas.key
                                    }, aDatas);
                                    this.$_settings.onNotLogged($_datas);
                                    $.directPayment.loaderHide(true);
                                    return true;
                                } else {
                                }
                            }
                            if (aDatas.returnurl){
                                if (this.$_settings.onRedirect) {
                                    this.$_settings.onRedirect(data);
                                }
                                location.href = aDatas.returnurl;
                            } else {
                                if (aDatas.error)
                                  location.href = '/generic_return.html?ecode=' + aDatas.error;
                                else
                                  location.href = '/generic_return.html?ecode=UNKNOW';
                            }
                            this.$_ajxQueryLastStatus = 'REDIRECT';
                            return true;
                        } else if (aDatas && aDatas.script) {
                          var aScript = $.parseJSON(aDatas.script);
                          if (aScript.scripts[0].callback) {
                            if (this.$_settings.onCallback) {
                                this.$_settings.onCallback(aScript.scripts[0].callback);
                            } else {
                              eval(aScript.scripts[0].callback);
                            }
                            $.directPayment.loaderHide(true);
                            return true;
                          }
                        } else if (aDatas && aDatas.redirect) {
                            if (this.$_settings.onRedirect) {
                                this.$_settings.onRedirect(data);
                            }

                            if (this.$_settings.subscriptionCore)
                              aDatas.redirect = aDatas.redirect + '&subscriptionCore=' + this.$_settings.subscriptionCore;

                            if (this.$_settings.subscriptionId)
                              aDatas.redirect = aDatas.redirect + '&subscriptionId=' + this.$_settings.subscriptionId;

                            location.href = aDatas.redirect;
                            this.$_ajxQueryLastStatus = 'REDIRECT';
                            return true;
                        } else if (aDatas && aDatas.success){
                            if (this.$_settings.onSuccess) {
                                this.$_settings.onSuccess(data);
                            }
                            if (aDatas.returnurl){
                                if (this.$_settings.onRedirect) {
                                    this.$_settings.onRedirect(data);
                                }

                                if (this.$_settings.subscriptionCore)
                                  aDatas.returnurl = aDatas.returnurl + '&subscriptionCore=' + this.$_settings.subscriptionCore;

                                if (this.$_settings.subscriptionId)
                                  aDatas.returnurl = aDatas.returnurl + '&subscriptionId=' + this.$_settings.subscriptionId;

                                location.href = aDatas.returnurl;
                                this.$_ajxQueryLastStatus = 'REDIRECT';
                                return true;
                            }
                            $.directPayment.loaderHide(true);
                            return false;
                        }

                    }
                    $.directPayment.loaderHide(true);
                    return false;
                }
            });

            if (this.$_settings.afterCheckout) {
                this.$_settings.afterCheckout();
            }
            return true;
        },

        /**
         * verifyPaymentForm
         *
         * @return void
         */
        verifyPaymentForm : function(options) {
            if (options.error==null)
              return false;

            var result = true;
			if (options.role=='giropay') {
              var ccBankCode = $('#' + this.getOption('gatewayId') + '_cc_bank_code').val();
              if ((ccBankCode==null) || (ccBankCode=='')) {
                options.error({error:'EMPTY', field:this.getOption('gatewayId')+'_cc_bank_code'});
                result = false;
//              } else if (!this.isInteger(ccBankCode)) {
//                options.error({error:'INVALID', field:this.getOption('gatewayId')+'_cc_bank_code'});
//                result = false;
              } else {
                options.success({info:this.getCreditCardInfos(), field:this.getOption('gatewayId')+'_cc_bank_code'});
              }

            } else if (options.role=='credit_card') {

              var ccType = $('#' + this.getOption('gatewayId') + '_cc_type').val();
              if ((ccType==null) || (ccType=='')) {
                options.error({error:'EMPTY', field:this.getOption('gatewayId')+'_cc_type'});
                result = false;
              } else {
                options.success({info:this.getCreditCardInfos(), field:this.getOption('gatewayId')+'_cc_type'});
              }

              var ccNumber = $('#' + this.getOption('gatewayId') + '_cc_number').val();
              if ((ccNumber==null) || (ccNumber=='')) {
                options.error({error:'EMPTY', field:this.getOption('gatewayId')+'_cc_number'});
                result = false;
              } else {
                var creditCardType = this.getCreditCardType();
                if ((creditCardType==null) || (creditCardType=='')) {
                  options.error({error:'INVALID', field:this.getOption('gatewayId')+'_cc_number'});
                  result = false;
                } else {
                  options.success({info:ccNumber, field:this.getOption('gatewayId')+'_cc_number'});
                }
              }

              var ccId = $('#' + this.getOption('gatewayId') + '_cc_cid').val();
              var isCcIdValid = this.isCcidCorrect(ccId);
              if ((ccId==null) || (ccId=='') || !isCcIdValid) {
                options.error({error:'EMPTY', field:this.getOption('gatewayId')+'_cc_cid'});
                result = false;
              } else {
                options.success({info:ccId, field:this.getOption('gatewayId')+'_cc_cid'});
              }

              var ccExpMonth = $('#' + this.getOption('gatewayId') + '_cc_exp_month').val();
              var ccExpYear = $('#' + this.getOption('gatewayId') + '_cc_exp_year').val();
              var currentDate = new Date()
              if ((ccExpMonth < (currentDate.getMonth()+1)) && (ccExpYear <= currentDate.getFullYear())) {
                options.error({error:'INVALID', field:this.getOption('gatewayId')+'_cc_exp_month'});
                options.error({error:'INVALID', field:this.getOption('gatewayId')+'_cc_exp_year'});
                options.error({error:'INVALID', field:this.getOption('gatewayId')+'_cc_exp'});
                result = false;
              } else {
                options.success({info:ccExpMonth, field:this.getOption('gatewayId')+'_cc_exp_month'});
                options.success({info:ccExpYear, field:this.getOption('gatewayId')+'_cc_exp_year'});
                options.success({info:ccExpMonth+'/'+ccExpYear, field:this.getOption('gatewayId')+'_cc_exp'});
              }

              var ccOwner = $('#' + this.getOption('gatewayId') + '_cc_owner').val();
			  if($('#' + this.getOption('gatewayId') + '_cc_owner').length!==0){
				if ((ccOwner==null) || (ccOwner=='')) {
					options.error({error:'EMPTY', field:this.getOption('gatewayId')+'_cc_owner'});
					result = false;
				} else {
					options.success({info:ccOwner, field:this.getOption('gatewayId')+'_cc_owner'});
				}
				return result;
			  }
            }
            return result;
        },

        /**
         * Serializes the payment form
         * Encrypts the credit card if necessary.
         * Please note that the encrypted values will NOT be visible for the end users
         *
         * We pass a form id to the function and then the scripts generates
         * an object representation of the form, ccFields (passed as an array) are extracted from the form
         * and encrypted with the public key (generated by the server)
         *
         * @param string formId Form Selector
         *
         * @return object
         */
        serializeForm : function(formSelector) {
            // To avoid scope issue
            var that = this;
            // Get the form key/value pair representation
            var form = $(formSelector).serializeObject();
            // Whether we use encryption or not, set to true
            var useEncryption = true;

            // Build map
            var map = {};
            $.each(form, function(index, value) {
                if (_CC_FIELDS.hasOwnProperty(index)) {
                    if ($.trim(value) !== '') {
                        map[_CC_FIELDS[index]] = value;
                    }
                    delete form[index];
                } else if (index === _CC_TYPE) {

                    var datas = that.getDatasFromCode($('#' + that.getOption('gatewayId') + '_cc_type').val());

                    form[index] = datas.code;
                    if (datas.role !== 'credit_card') {
                        useEncryption = false;
                    }

                } else if (index === _CC_START_DATE_MONTH) {
                    if ($.trim(form[_CC_START_DATE_MONTH]) !== '' && $.trim(form[_CC_START_DATE_YEAR]) !== '') {
                        var _startDateYear  = form[_CC_START_DATE_YEAR].slice(-2);
                        var _startDateMonth = '0' + form[_CC_START_DATE_MONTH].slice(-2);
                        map[_CC_FIELDS[_CC_START_DATE]] = _startDateMonth + '/' + _startDateYear;
                    }
                    // Delete start date fields if not used
                    delete form[_CC_START_DATE_MONTH];
                    delete form[_CC_START_DATE_YEAR];
                }
            });

            if (!$.isEmptyObject(map) && useEncryption) {
                form['payment[cc_encrypted_data]']   = this.encrypt($.param(map));
                form['payment[cc_encryption_token]'] = this.getOption('authentication_token').token;
            }

            return form;
        },

        /**
         * Encrypts a text with the RSA public key generated by the server class
         *
         * @param string text Text to encrypt
         *
         * @return string
         */
        encrypt: function(text) {
            var params = _parseCertificate(this.getOption('authentication_token').publicKey);
            if (params.b64) {
                var key = pidCryptUtil.decodeBase64(params.b64);
                // new RSA instance
                var rsa = new pidCrypt.RSA();
                // RSA encryption
                // ASN1 Parsing
                var asn  = pidCrypt.ASN1.decode(pidCryptUtil.toByteArray(key));
                var tree = asn.toHexTree();
                // Setting the public key for encryption of text
                rsa.setPublicKeyFromASN(tree);
                // Get encrypted data
                var crypted = rsa.encrypt(text);
                // Return data to client
                return pidCryptUtil.fragment(
                    pidCryptUtil.encodeBase64(pidCryptUtil.convertFromHex(crypted)),
                    64
                );
            }
        },

        /**
         * validateCreditCard Creditcards numbers
         *
         * @return this
         */
        validateCreditCard : function() {
          return $('#' + this.getOption('gatewayId') + '_cc_number').ValidateCreditCard({
            accept: $.directPayment.getAcceptedCreditCard(),
            bypassLuhn: this.getOption('bypassLuhn')
          });
        },

        /**
         * Get array of ccTypes as role credit_card
         *
         * @param array ccAvailableTypesList Array of Available ccTypes
         *
         * @return array
         */
        getAcceptedCreditCard: function() {
            var ccAvailableTypesList = this.getOption('ccTypes');
            var acceptCreditCards = [];
            for (var i in ccAvailableTypesList) {
                if (!ccAvailableTypesList.hasOwnProperty(i)) continue;
                if (typeof ccAvailableTypesList[i] == 'object') {
                    if (ccAvailableTypesList[i].role=='credit_card') {
                        acceptCreditCards.push(i);
                    }
                }
            }
            return acceptCreditCards;
        },

        /**
         * Get role credit_card
         *
         * @param string ccType
         *
         * @return string
         */
        getDatasFromCode: function(ccType) {
            if ((ccType == null) || (ccType == ''))
                return false;

            var ccAvailableTypesList = this.getOption('ccTypes');
            for (var i in ccAvailableTypesList) {
                if (!ccAvailableTypesList.hasOwnProperty(i)) continue;
                if (typeof ccAvailableTypesList[i] == 'object') {
                    if (ccAvailableTypesList[i].code==ccType) {
                        return ccAvailableTypesList[i];
                    }
                }
            }
            return false;
        },

        /**
         * Gets Availables ccTypes
         *
         * @return this
         */
        getCcTypes : function() {
            return this.getOption('ccTypes');
        },

        /**
         * Get object by key and value
         *
         * @param object obj Object
         * @param string key Key search
         * @param string val Value of key search
         *
         * @return this
         */
        getObjects : function(obj, key, val) {
            var objects = [];
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) continue;
                if (typeof obj[i] == 'object') {
                    objects = objects.concat(this.getObjects(obj[i], key, val));
                } else if (i == key && obj[key] == val) {
                    objects.push(obj);
                }
            }
            return objects;
        },

        /**
         * Get objects from role
         *
         * @param string aRole Role of payment
         *
         * @return this
         */
        getObjectsFromRole : function(aRole) {
            return $.directPayment.getObjects(this.getCcTypes(), 'role', aRole);
        },

        /**
         * Get is Integer value
         *
         * @param string aValue value of test
         *
         * @return bool
         */
        isInteger : function(aValue) {
            return (aValue%(parseInt(aValue)/Number(aValue)))===0;
        },

        /**
         * loader hide
         *
         * @return void
         */
        loaderHide : function(conditional) {
            if (conditional)
              if (!this.$_settings.useLoader)
                return false;

            if(loaderOptions){
              if($("#"+loaderOptions.id)){
                $("#"+loaderOptions.id +", #"+loaderOptions.overlay.id).remove();
              }
            }
        },

        /**
         * loader show
         *
         * @param option array Options of loader
         *
         * @return void
         */
        loaderShow : function(conditional, option) {
           if (conditional)
               if (!this.$_settings.useLoader)
                 return false;

            var options = $.extend({
              content   : '',
              className :'loader',
              id        :'jquery-loader',
              height    : 50,
              width     : 50,
              zIndex    : 30000,
              overlay :{
                opacity: 0.4,
                id     : 'jquery-loader-overlay'
              }
            }, option);

            loaderOptions = options;
            var maskHeight = $(document).height();
            var maskWidth = $(window).width();
            var bgDiv = $('<div id="' + options.overlay.id + '"/>');
            bgDiv.css({
              zIndex  :options.zIndex,
              position:'absolute',
              top     :'0px',
              left    :'0px',
              width   :maskWidth,
              height  :maskHeight,
              opacity :options.overlay.opacity
            });

            bgDiv.appendTo("body");
            if(jQuery.bgiframe){
              bgDiv.bgiframe();
            }
            var div = $('<div id="' + options.id + '" class="' + options.className + '"></div>');
            div.css({
              zIndex : options.zIndex+1,
              width  : options.width,
              height : options.height
            });
            div.appendTo('body');

            div.css("position","absolute");
            div.css("top", ( $(window).height() - div.outerHeight() ) / 2+$(window).scrollTop() + "px");
            div.css("left", ( $(window).width() - div.outerWidth() ) / 2+$(window).scrollLeft() + "px");

//            div.loaderCenter();
            $(options.content).appendTo(div);
        }
    };


    // Create shorthand
    $[_pluginName] = new Plugin(this, {});

})(jQuery, window, document);

/*
Nexway jQuery Credit Card Validator

Based on http://jquerycreditcardvalidator.com/
Copyright 2012 Pawel Decowski

This work is licensed under the Creative Commons Attribution-ShareAlike 3.0
Unported License. To view a copy of this license, visit:

http://creativecommons.org/licenses/by-sa/3.0/

or send a letter to:

Creative Commons, 444 Castro Street, Suite 900,
Mountain View, California, 94041, USA.
*/
(function($){
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $.fn.ValidateCreditCard = function(options)
  {

    var card, card_type, card_types, get_card_type, is_valid_length, is_valid_luhn, normalize, validate, validate_number, _i, _len, _ref, _ref1;
    card_types = [
      {
        name: 'amex',
        pattern: /^3[47]/,
        valid_length: [15]
      }, {
        name: 'diners',
        pattern: /^(30[0-5]|36)/,
        valid_length: [14]
      }, {
        name: 'diners_club_international',
        pattern: /^36/,
        valid_length: [14]
      }, {
        name: 'diners_club_carte_blanche',
        pattern: /^30[0-5]/,
        valid_length: [14]
      }, {
        name: 'diners_club_international',
        pattern: /^36/,
        valid_length: [14]
      }, {
        name: 'jcb',
        pattern: /^35(2[89]|[3-8][0-9])/,
        valid_length: [16]
      }, {
        name: 'laser',
        pattern: /^(6304|670[69]|6771)/,
        valid_length: [16, 17, 18, 19]
      }, {
        name: 'postepay',
        pattern: /^(402360)/,
        valid_length: [16]
      }, {
        name: 'visa_electron',
        pattern: /^(4026|417500|4508|4844|491(3|7))/,
        valid_length: [16]
      }, {
        name: 'visa',
        pattern: /^CB0/,
        valid_length: [16]
      }, {
        name: 'visa',
        pattern: /^4/,
        valid_length: [16]
      }, {
        name: 'mastercard',
        pattern: /^5[1-5]/,
        valid_length: [16]
      }, {
        name: 'maestro',
        pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
        valid_length: [12, 13, 14, 15, 16, 17, 18, 19]
      }, {
        name: 'discover',
        pattern: /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,
        valid_length: [16]
      }, {
        name: 'cb',
        //pattern: /^4/,
        valid_length: [16]
      }, {
        name: 'elo',
        pattern: /^(636368|438935|504175|451416|636297|5067|4576|4011)/,
        valid_length: [16]
      }, {
        name: 'aura',
        pattern: /^(50)/,
        valid_length: [16]
      }, {
        name: 'hiper',
        pattern: /^(637600|637095|637568|637599|637609|637612)/,
        valid_length: [13,16,19]
      }, {
        name: 'hipercard',
        pattern: /^(606282)/,
        valid_length: [13,16,19]
      }
    ];
    if (options == null) {
      options = {};
    }
    if ((_ref = options.accept) == null) {
      options.accept = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = card_types.length; _i < _len; _i++) {
          card = card_types[_i];
          _results.push(card.name);
        }
        return _results;
      })();
    }
    _ref1 = options.accept;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      card_type = _ref1[_i];
      if (__indexOf.call((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = card_types.length; _j < _len1; _j++) {
          card = card_types[_j];
          _results.push(card.name);
        }
        return _results;
      })(), card_type) < 0) {
        //return null;
        //throw "Credit card type '" + card_type + "' is not supported";
      }
    }
    get_card_type = function(number) {
      var _j, _len1, _ref2;
      _ref2 = (function() {
        var _k, _len1, _ref2, _results;
        _results = [];
        for (_k = 0, _len1 = card_types.length; _k < _len1; _k++) {
          card = card_types[_k];
          if (_ref2 = card.name, __indexOf.call(options.accept, _ref2) >= 0) {
            _results.push(card);
          }
        }
        return _results;
      })();
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        card_type = _ref2[_j];
        if (number.match(card_type.pattern)) {
          return card_type;
        }
      }
      return null;
    };
    is_valid_luhn = function(number) {
      var digit, n, sum, _j, _len1, _ref2;
      sum = 0;
      if (number.match(/^CB0/)) {
        return true;
      }
      _ref2 = number.split('').reverse();
      for (n = _j = 0, _len1 = _ref2.length; _j < _len1; n = ++_j) {
        digit = _ref2[n];
        digit = +digit;
        if (n % 2) {
          digit *= 2;
          if (digit < 10) {
            sum += digit;
          } else {
            sum += digit - 9;
          }
        } else {
          sum += digit;
        }
      }
      return sum % 10 === 0;
    };
    is_valid_length = function(number, card_type) {
      var _ref2;
      return _ref2 = number.length, __indexOf.call(card_type.valid_length, _ref2) >= 0;
    };
    validate_number = function(number) {
      var length_valid, luhn_valid;
      card_type = get_card_type(number);
      luhn_valid = false;
      length_valid = false;
      if (card_type != null) {
        luhn_valid = is_valid_luhn(number);
        length_valid = is_valid_length(number, card_type);
      }
      return {
        card_type: card_type,
        luhn_valid: luhn_valid,
        length_valid: length_valid
      };
    };
    validate = function(number) {
      number = normalize(number);
      return options.bypassLuhn ? number : validate_number(number);
    };
    normalize = function(number) {
      return number.replace(/[ -]/g, '');
    };

    return validate($(this).val());
  };
})(jQuery);

/**
 * serializeObject plugin
 *
 * Encode a set of form elements as a key/value pair object
 *
 * @author    Christophe Eblé <ceble@nexway.com>
 * @author    Richard Pochot <rpochot@nexway.com>
 * @package   DirectPayment
 * @copyright Nexway - 2013
 */
(function($){
    // Encode a set of form elements as a key/value pair object
    $.fn.serializeObject = function()
    {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function() {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };
})(jQuery);
